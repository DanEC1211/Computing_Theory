<!DOCTYPE html>
<html>
<head>
  <title>Universo de Cadenas Binarias</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f0f0f0;
      color: #333;
    }
    .form-control {
      max-width: 300px;
    }
    .btn {
      background-color: #6c757d;
      color: #f0f0f0;
    }
    .btn:hover {
      background-color: #5a6268;
    }
    #chart {
      width: 80%;
      height: 400px;
      margin: 20px auto;
    }
    a {
      color: #333;
      text-decoration: none;
      display: inline-block;
      margin: 10px;
    }
    a:hover {
      color: #666;
    }
    #status {
      text-align: center;
      margin-top: 20px;
    }
  </style>
</head>
<body class="container py-5">
  <div class="d-flex justify-content-center"> 
    <h1 class="mb-4 text-secondary">Generador de Universos</h1>
  </div>
  <form id="form" class="form-inline justify-content-center flex-column flex-md-row">
    <div class="form-group mb-2">
      <label for="n" class="mr-2">Introduce el valor de n (0-1000):</label>
      <input type="number" class="form-control" id="n" name="n" min="0" max="1000">
    </div>
    <button type="button" class="btn btn-secondary mb-2 ml-md-2" id="auto">Ejecutar Automático</button>
    <button type="button" class="btn btn-secondary mb-2 ml-md-2" id="manual">Ejecutar Manual</button>
    <div class="form-group mb-2 ml-md-2">
      <label for="gotoPage" class="mr-2">Ir a la página:</label>
      <input type="number" class="form-control" id="gotoPage" name="gotoPage" min="0">
    </div>
    <button type="button" class="btn btn-secondary mb-2 ml-md-2" id="goto">Ir</button>
  </form>
  <div class="d-flex justify-content-center align-items-center my-4">
    <button type="button" class="btn btn-secondary mr-2" id="prev">Prev</button>
    <span id="batchIndicator">0 de 0</span>
    <button type="button" class="btn btn-secondary ml-2" id="next">Next</button>
  </div>
  <span id="status" class="d-block text-center mb-4">Listo</span>
  <canvas id="chart" class="mx-auto d-block"></canvas>
  <div class="d-flex justify-content-center mt-4">
    <a id="download" href="/download" class="btn btn-secondary mr-2">Descargar archivo de texto</a>
    <a href="/" class="btn btn-secondary">Volver al menu</a>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    let chart; // Variable para almacenar el gráfico
    const autoButton = document.getElementById('auto');
    const manualButton = document.getElementById('manual');
    const prevButton = document.getElementById('prev');
    const nextButton = document.getElementById('next');
    const nInput = document.getElementById('n');
    const batchIndicator = document.getElementById('batchIndicator');
    const statusIndicator = document.getElementById('status');
    let currentBatch = 0; // Lote actual
    let totalBatches = 0; // Total de lotes
    const gotoButton = document.getElementById('goto');
    let gotoPageInput = document.getElementById('gotoPage');
    const downloadLink = document.getElementById('download');

    gotoButton.addEventListener('click', function() {
      const gotoPage = parseInt(gotoPageInput.value-1);
      if (!isNaN(gotoPage) && gotoPage >= 0 && gotoPage < totalBatches) { 
        console.log(currentBatch);
        currentBatch = gotoPage ;
        console.log(currentBatch);
        fetchAndPlotBatch(currentBatch);
      }
    });

    autoButton.addEventListener('click', function() {
      const n = Math.floor(Math.random() * 32); 
      nInput.value = n; 
      currentBatch = 0;
      fetchTotalBatches(n).then(() => fetchAndPlotBatch(currentBatch)); 
    });

    manualButton.addEventListener('click', function() {
      const n = nInput.value;
      currentBatch = 0;
      fetchTotalBatches(n).then(() => fetchAndPlotBatch(currentBatch)); 
    });


    prevButton.addEventListener('click', function() {
      if (currentBatch > 0) {
        currentBatch--;
        fetchAndPlotBatch(currentBatch);
      }
    });

    nextButton.addEventListener('click', function() {
      if (currentBatch < totalBatches - 1) {
        currentBatch++;
        fetchAndPlotBatch(currentBatch);
      }
    });

    downloadLink.addEventListener('click', function(event) {
      event.preventDefault(); 
      const n = nInput.value; 
      const maxBatchIndex = (batchIndicator.textContent.split(' de ')[1])-1; 
      statusIndicator.textContent = "Preparando la descarga..."; 
      window.location.href = `/download?maxBatchIndex=${maxBatchIndex}&n=${n}`;
  });

    function fetchAndPlotBatch(batch) {
      statusIndicator.textContent = "Graficando..."; 
      fetch(`/batch/${batch}`)
        .then(response => response.json())
        .then(data => {
          updateChart(data);
          batchIndicator.textContent = `${currentBatch + 1} de ${totalBatches}`; 
          nextButton.disabled = currentBatch >= totalBatches - 1; 
          prevButton.disabled = currentBatch === 0; 
          statusIndicator.textContent = "Listo"; 
        })
        .catch(error => {
          console.error('Error:', error);
        });
    }

    function fetchTotalBatches(n) {
      statusIndicator.textContent = "Calculando..."; 
      return fetch('/calc', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ n }),
      })
      .then(response => response.json())
      .then(data => {
        totalBatches = data.totalBatches;
        batchIndicator.textContent = `${currentBatch + 1} de ${totalBatches}`; 
        nextButton.disabled = currentBatch >= totalBatches; 
        prevButton.disabled = currentBatch === 0; 
        statusIndicator.textContent = "Listo"; 
      })
      .catch((error) => {
        console.error('Error:', error);
      });
    }

    function updateChart(data) {
      const ctx = document.getElementById('chart').getContext('2d');
      if (chart) {
          chart.destroy(); 
      }
      
      const binaryStrings = data.binaryStrings;
      

      chart = new Chart(ctx, {
          type: 'line',
          data: {
              labels: binaryStrings,
              datasets: [{
                  label: 'Número de unos',
                  data: data.counts,
                  backgroundColor: 'rgba(128, 0, 128, 0.2)', 
                  borderColor: 'rgba(128, 0, 128, 1)', 
                  borderWidth: 1
              }]
          },
          options: {
              scales: {
                  y: {
                      beginAtZero: true
                  }
              }
          }
      });
    }

    // Comienza con el primer lote
    fetchAndPlotBatch(0);

  </script>
</body>
</html>